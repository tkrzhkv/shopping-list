import { type ShoppingItem } from "@prisma/client";
import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import ItemModal from "~/components/ItemModal";
import { HiX } from "react-icons/hi";
import { api } from "~/utils/api";
import { motion } from "framer-motion";

const Home: NextPage = () => {
  const [items, setItems] = useState<ShoppingItem[]>([]);
  const [checkedItems, setCheckedItems] = useState<ShoppingItem[]>([]);
  const [modalOpen, setModalOpen] = useState<boolean>(false);

  const { data: itemsData, isLoading } = api.items.getAllItems.useQuery(
    undefined,
    {
      onSuccess(shoppingItems) {
        setItems(shoppingItems);
        const checked = shoppingItems.filter((item) => item.checked);
        setCheckedItems(checked);
      },
    }
  );

  const { mutate: deleteItem } = api.items.deleteItem.useMutation({
    onSuccess(shoppingItem) {
      setItems((prev) => prev.filter((item) => item.id !== shoppingItem.id));
    },
  });

  const { mutate: toggleChecked } = api.items.toggleChecked.useMutation({
    onSuccess(shoppingItem) {
      //check if this item already checked
      if (checkedItems.some((item) => item.id === shoppingItem.id)) {
        //remove it from the checked items
        setCheckedItems((prev) =>
          prev.filter((item) => item.id !== shoppingItem.id)
        );
      } else {
        //add it to checked items
        setCheckedItems((prev) => [...prev, shoppingItem]);
      }
    },
  });

  if (!itemsData || isLoading) return <p>Loading...</p>;

  return (
    <>
      <Head>
        <title>Shopping List</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {modalOpen && (
        <ItemModal setModalOpen={setModalOpen} setItems={setItems} />
      )}
      <main className=" mx-auto my-12 max-w-3xl">
        <div className="flex justify-between">
          <h2 className="text-2xl font-semibold">My shopping list</h2>
          <button
            onClick={() => setModalOpen(!false)}
            type="button"
            className="rounded-md bg-violet-500 p-2 text-white hover:bg-violet-700"
          >
            Add item
          </button>
        </div>
        <ul className="mt-4">
          {items.map((item) => {
            const { id, name } = item;
            return (
              <li key={id} className="flex w-full items-center justify-between">
                <div className="relative">
                  <div className="pointer-events-none absolute inset-0 flex origin-left items-center justify-center">
                    <motion.div
                      initial={{ width: 0 }}
                      animate={{
                        width: checkedItems.some((item) => item.id === id)
                          ? "100%"
                          : 0,
                      }}
                      transition={{ duration: 0.2, ease: "easeInOut" }}
                      className="h-[2px] w-full translate-y-px bg-red-500"
                    />
                  </div>
                  <span
                    className=" cursor-pointer"
                    onClick={() => {
                      toggleChecked({
                        id,
                        checked: checkedItems.some((item) => item.id === id)
                          ? false
                          : true,
                      });
                    }}
                  >
                    {name}
                  </span>
                </div>
                <HiX
                  onClick={() => deleteItem({ id })}
                  className="cursor-pointer text-lg text-red-500"
                />
              </li>
            );
          })}
        </ul>
      </main>
    </>
  );
};

export default Home;
